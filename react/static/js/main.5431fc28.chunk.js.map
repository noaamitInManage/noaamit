{"version":3,"sources":["redux/reducers/reducers_state.js","redux/reducers/reducers_data.js","redux/reducers/index.js","constants/action-types.js","redux/index.js","containers/header/DesktopMenu/index.js","redux/actions/actions_state.js","app/functions/index.js","containers/header/BurgerMenu/index.js","containers/header/index.js","constants/routes.js","components/meta_tags/index.js","components/common/loader/index.js","components/routing/scroll_top.js","containers/home/index.js","containers/about/index.js","app/validation/validation.js","components/forms/animated_input/index.js","containers/contact/index.js","redux/actions/actions_data.js","containers/content-page/index.js","popups/components/basic/index.js","popups/index.js","containers/page404/index.js","docs/tools/device/index.js","docs/doc-routes/index.js","docs/tools/index.js","docs/components/scrolltop/index.js","docs/components/meta/index.js","docs/components/loader/index.js","docs/components/popups/index.js","constants/popup-types.js","docs/components/index.js","docs/index.js","App.js","index.js","app/device_state/index.js","assets/icons/burger.svg","assets/logos/react.svg"],"names":["initialState","showLoader","deviceState","burgerMenuState","popupsArray","requesting","GeneralDeclaration","ContactForm","full_name","combineReducers","state","action","type","payload","slice","data","Store","createStore","rootReducer","applyMiddleware","thunk","DesktopMenu","props","className","map","item","index","to","route","exact","activeClassName","key","text","addPopup","popup_id","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","generateUniqueId","setBurgerState","BurgerMenu","useSelector","store","dispatch","useDispatch","handleCloseClick","Actions","onClick","menuList","Header","isMobile","src","burger","alt","notMobile","logo","Meta","this","Tags","metaTagsArr","meta_tags","name","content","extra_tags","ReactHtmlParser","Component","connect","MetaTags","pure","Loader","withRouter","children","pathname","location","useEffect","window","scrollTo","Home","About","gd","Validate","value","rules","Validations","no_validation","valid","val","msg","not_empty","address","package","email","test","cell","phone","id","last_digits","checkbox","rule","AnimatedInput","useState","animated","setAnimated","placeholder","disable_autocomplete","showError","errorMessage","tabIndex","is_animated","onChange","e","target","animatePlaceholder","autoComplete","Contact","handleInputChange","validate","form","new_state","errMsg","setState","updateForm","handleSubmit","preventDefault","is_valid","form_valid","field","Form","first_try","console","log","message","translations","ContentPage","Translations","config","BasicPopup","animateIn","requestAnimationFrame","animation_class","animateOut","callback","setTimeout","removePopup","Data","stopPropagation","Gd","popupsComponents","Popups","currentPopup","popupToRender","Page404","label","amount","Tool","meta","Tools","path","component","Device","doSomeAsyncThing","setLoader","showAPopup","Components","Routes","Scroll","Documentation","App","showPopup","Content","Docs","page","getScreen","1","2","3","4","parseInt","getComputedStyle","indicator","getPropertyValue","start","response","debounce","device","isTablet","isDesktop","notDesktop","setDeviceState","debounce_delay","addEventListener","document","createElement","body","appendChild","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","ReactDOM","render","basename","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5431fc28.chunk.js","sourcesContent":["import * as types   from \"../../constants/action-types\";\n\nlet initialState = {\n    showLoader: false,\n    deviceState: false,\n    burgerMenuState: false,\n    popupsArray: [],\n    requesting: false,\n}\n\nexport default function state_reducer(state = initialState, action) {\n    switch (action.type) {\n        case types.SET_LOADER_STATE:\n            return {\n                ...state,\n                showLoader: action.payload\n            };\n        case types.SET_DEVICE_STATE:\n            return {\n                ...state,\n                deviceState: action.payload\n            };\n        case types.SET_BURGER_STATE:\n            return {\n                ...state,\n                burgerMenuState: action.payload\n            };\n        case types.SET_CURRENT_POPUP:\n            return {\n                ...state,\n                popupsArray: [...state.popupsArray, action.payload]\n            };\n        case types.REMOVE_CURRENT_POPUP:\n            return {\n                ...state,\n                popupsArray: [...state.popupsArray.slice(0,-1)]\n            };\n        case types.SET_REQUEST_STARTED:\n            return {\n                ...state,\n                requesting: true\n            };\n        case types.SET_REQUEST_ENDED:\n            return {\n                ...state,\n                requesting: false\n            };\n        default:\n            return state;\n    }\n}\n","import * as types   from \"../../constants/action-types\";\n\nlet initialState = {\n    GeneralDeclaration: {},\n    ContactForm:{\n        full_name:''\n    }\n}\n\nexport default function data_reducer(state = initialState, action) {\n    switch (action.type) {\n        case types.UPDATE_CONTACT_FORM:\n            return {\n                ...state,\n                ContactForm: {\n                    ...state.ContactForm,\n                    ...action.payload\n                }\n            }\n        case types.SET_GENERAL_DECLARATION:\n            return {\n                ...state,\n                GeneralDeclaration: action.payload\n            }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport state               from './reducers_state';\nimport data                from './reducers_data';\n\nexport default combineReducers({\n    state,\n    data\n});","//State\nexport const SET_REQUEST_STARTED       = 'REQUEST_STARTED';\nexport const SET_REQUEST_ENDED         = 'REQUEST_ENDED';\nexport const SET_BURGER_STATE          = 'SET_BURGER_STATE';\nexport const SET_CURRENT_POPUP         = 'SET_CURRENT_POPUP';\nexport const REMOVE_CURRENT_POPUP      = 'REMOVE_CURRENT_POPUP';\nexport const SET_DEVICE_STATE          = 'SET_DEVICE_STATE';\nexport const SET_LOADER_STATE          = 'SET_LOADER_STATE';\n\n\n//Data\nexport const SET_TRANSLATIONS          = 'SET_TRANSLATIONS';\nexport const SET_USER                  = 'SET_USER';\nexport const SET_CATEGORIES            = 'SET_CATEGORIES';\nexport const UPDATE_CONTACT_FORM       = 'UPDATE_CONTACT_FORM';\nexport const SET_GENERAL_DECLARATION   = 'SET_GENERAL_DECLARATION';\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer                      from \"./reducers\";\nimport thunk                            from 'redux-thunk';\n\nconst Store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default Store;\n","import React       from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './index.scss';\n\nexport default function DesktopMenu(props) {\n    return (\n        <nav className=\"desktop-menu\">\n            {props.data.map((item, index) =>\n                <NavLink to = { item.route } exact activeClassName='active' className=\"desktop-menu-item\" key={ 'mi' + index }>\n                    <h4 className=\"menu-item\">\n                        { item.text }\n                    </h4>\n                </NavLink>\n            )}\n        </nav>\n    )\n}","import * as types from \"constants/action-types\";\nimport { generateUniqueId } from 'app/functions';\n\nexport function requestStarted() {\n    return {type : types.SET_REQUEST_STARTED};\n}\n\nexport function requestEnded() {\n    return {type : types.SET_REQUEST_ENDED};\n}\n\nexport const addPopup = (payload) => {\n    payload.popup_id = generateUniqueId(16); \n    return {type : types.SET_CURRENT_POPUP, payload};\n}\n\nexport const removePopup = (payload) => {\n    return {type : types.REMOVE_CURRENT_POPUP, payload};\n}\n\nexport function setDeviceState(payload) {\n    return {type : types.SET_DEVICE_STATE, payload};\n}\n\nexport const setBurgerState = (payload) => {\n    return {type : types.SET_BURGER_STATE, payload};\n}\n\nexport const setLoaderState = (payload) => {\n    return {type : types.SET_LOADER_STATE, payload};\n}","import AppConfig from 'app/config/AppConfig';\n\n//returns full path of asset\nexport function getPath(path) {\n    let Config = new AppConfig();\n    return (Config.debug_mode ? Config.media_path + path : path);\n}\n\n//returns full path of asset\nexport function getMediaPath(path) {\n    let Config = new AppConfig();\n    return Config.media_path + path;\n}\n\n//check for empty objects\nexport function notEmptyObject(obj) {\n    let empty = true;\n    if(obj) {\n        if(Object.keys(obj).length !== 0 && obj.constructor === Object) {\n            empty = false;\n        }\n    }\n    return empty;\n}\n\n//Convert Object to sorted array by order_num\nexport function convertToSortedArray(obj) {\n    let sortedArr = Object.keys(obj).map(key => obj[key]);\n    sortedArr = sortedArr.sort((a,b) => { return a.order_num - b.order_num });\n    return sortedArr;\n}\n\n//query browser for user location\nexport function getUserGeoLocation(onSuccess, onFailure) {\n    if (\"geolocation\" in navigator) {\n        // check if geolocation is supported/enabled on current browser\n        navigator.geolocation.getCurrentPosition (\n            function success(position) {\n                // for when getting location is a success\n                onSuccess(position);\n            },\n            function error(error_message) {\n                // for when getting location results in an error\n                // console.error('An error has occured while retrieving location', error_message);\n                onFailure(error_message);\n            });\n    } else {\n        // geolocation is not supported\n        // get your location some other way\n        console.log('geolocation is not enabled on this browser');\n    }\n}\n\nexport function setMarkerClustersScript(clusterScriptOnLoad) {\n    let cluster_script_attached = document.getElementById('google-map-cluster');\n    if(cluster_script_attached === null) {\n        let s = document.createElement('script');\n        s.async = true;\n        s.id = 'google-map-cluster';\n        s.type = 'text/javascript';\n        s.src = 'https://unpkg.com/@google/markerclustererplus@4.0.1/dist/markerclustererplus.min.js';\n        let x = document.getElementsByTagName('script')[1];\n        x.parentNode.insertBefore(s, x);\n\n        /* listen for google map script load event */\n        s.addEventListener('load', e => clusterScriptOnLoad());\n    }\n    else{\n        clusterScriptOnLoad();\n    }\n}\n\n//calculate distance in Km between 2 gps points\nfunction toRad(num) {\n    return num * Math.PI / 180;\n}\nexport function calcDistance(p1, p2) {\n    var R = 6371; // Radius of the earth in km\n    var dLat = toRad((p1.lat - p2.lat)); // Javascript functions in radians\n    var dLon = toRad((p1.lng - p2.lng));\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(p2.lat)) * Math.cos(toRad(p1.lat)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c; // Distance in km\n    return parseInt(d);\n}\n\n\nexport function generateUniqueId(length) {\n    var result           = [];\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n        result.push(characters.charAt(Math.floor(Math.random() *\n            charactersLength)));\n    }\n    return result.join('');\n}\n","import React           from 'react';\nimport { NavLink }     from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\n\n//import actions\nimport * as Actions from 'redux/actions';\nimport './index.scss';\n\nexport default function BurgerMenu(props) {\n\n    const state    = useSelector(store => store.state.burgerMenuState);\n    const dispatch = useDispatch();\n\n    const handleCloseClick = () => {\n        dispatch(Actions.setBurgerState(false));\n    }\n\n    return (\n        <div className={\"burger-menu-wrapper \" + (state ? 'active' : '')}\n             onClick = { handleCloseClick }>\n            <div className=\"burger-menu\">\n                <ul className=\"burger-menu-list\">\n                    {props.data.map((item, index) =>\n                        <li className=\"burger-menu-item\" key={\"burger-item-\" + index}>\n                            <NavLink exact\n                                     to={ item.route }\n                                     activeClassName='active'\n                                     className=\"btn burger-menu-link\"\n                                     onClick={handleCloseClick}>\n                                <span>{ item.text }</span>\n                            </NavLink>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        </div>\n    )\n}","import React           from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\n\n//Components\nimport DesktopMenu from './DesktopMenu';\nimport BurgerMenu  from './BurgerMenu';\n\n//Assets\nimport './index.scss';\nimport burger from 'assets/icons/burger.svg';\nimport logo   from 'assets/logos/react.svg';\n\n//routing constants\nimport * as Routes from 'constants/routes';\n\n//Actions\nimport * as Actions from 'redux/actions';\n\n/* example menu data from api */\nconst menuList = [\n    {\n        text: 'ראשי',\n        route: Routes.root\n    },\n    {\n        text: 'אודות',\n        route: Routes.about,\n    },\n    {\n        text: 'צור קשר',\n        route: Routes.contact\n    },\n];\n\nfunction Header() {\n\n    const deviceState = useSelector(store => store.state.deviceState);\n    const dispatch = useDispatch();\n    const handleBurgerClick = () => {\n        dispatch(Actions.setBurgerState(true));\n    }\n\n    return (\n        <header className='header-wrapper'>\n            <div className=\"header\">\n                { deviceState.isMobile &&\n                    <div className=\"burger-icon\" onClick={ handleBurgerClick }>\n                        <img src={ burger } alt=\"\" />\n                    </div>\n                }\n                { deviceState.notMobile && <DesktopMenu data = { menuList } /> }\n                { deviceState.isMobile &&  <BurgerMenu  data = { menuList } /> }\n                <img src={ logo } className=\"logo\" alt=\"\" />\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","export const root       = '/';\nexport const about      = '/אודות';\nexport const contact    = '/צור_קשר';\n\n/* documentation */\nexport const docs       = '/docs';","import React           from 'react';\nimport { Component }   from 'react';\nimport { connect }     from 'react-redux';\nimport MetaTags        from 'react-meta-tags';\nimport ReactHtmlParser from 'react-html-parser';\n\nclass Meta extends Component {\n    \n    render() {\n        const data = this.props.Tags;\n\n        let metaTagsArr = [];\n        if(data) {\n            for(let key in data.meta_tags) {\n                metaTagsArr.push(\n                  <meta name={ key } content= { data.meta_tags[key] } key={ key } />\n                );\n            };\n        }\n\n        return (\n            <MetaTags>\n                { data &&\n                    <>\n                        { metaTagsArr }\n                        <title>{ data.meta_tags['title'] }</title>\n                        {\n                            data.extra_tags.map((item) => {\n                                return (\n                                    ReactHtmlParser(item)\n                                )\n                            })\n                        }\n                    </>\n                }\n            </MetaTags>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        Tags: store.data.MetaTags\n    }\n}\n\nexport default connect(mapStateToProps, null, null, { pure: false })(Meta);","import React from 'react';\nimport './index.scss';\n\nconst Loader = (props) => {\n\n    return (\n        <div className= \"loader_wrapper\">\n            <div className=\"loader\"></div>\n        </div>\n    );\n}\nexport default Loader;","import { withRouter } from 'react-router-dom';\nimport { useEffect }  from 'react';\n\nconst ScrollToTop = ({ children, location: { pathname } }) => {\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return children || null;\n};\n\nexport default withRouter(ScrollToTop);","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport './index.scss';\n\nclass Home extends Component {\n    \n    render() {\n        return (\n            <div className=\"home\">\n                <h1>עמוד הבית</h1>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {}\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Home);\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport './index.scss';\n\nclass About extends Component {\n\n    render() {\n        return (\n            <div className=\"home\">\n                <h1>עמוד אודות</h1>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n        gd:store.data.GeneralDeclaration,\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {}\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(About);\n","export default function Validate(value, rules) {\n\n    const Validations = {\n        no_validation: {\n            valid: val => true,\n            msg: '',\n        },\n        not_empty: {\n            valid: val => val !== '',\n            msg: 'שדה חובה',\n        },\n        address: {\n            valid: val => val !== '',\n            msg: 'יש לבחור כתובת למשלוח',\n        },\n        package: {\n            valid: val => val !== '',\n            msg: 'יש לבחור מסלול',\n        },\n        email: {\n            valid: val => /^([\\w!#$%&'*+-/=?^`{|}~]+\\.)*[\\w!#$%&'*+-/=?^`{|}~]+@((((([a-zA-Z0-9]{1}[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]{1})|[a-zA-Z])\\.)+[a-zA-Z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(:\\d{1,5})?)$/.test(val),\n            msg: 'כתובת דוא\"ל שגויה',\n        },\n        cell: {\n            valid: val => /^(?:(0(?:50|51|52|53|54|55|57|58|72|73|74|76|77|78)[-]?[0-9]{7}))$/.test(val),\n            msg: 'מספר סלולרי שגוי',\n        },\n        phone: {\n            valid: val => /^(?:(0(?:2|3|4|8|9|7|50|51|52|53|54|55|56|57|58|59|72|73|74|76|77|78)[-]?[0-9]{7}))$/.test(val),\n            msg: 'מספר טלפון שגוי',\n        },\n        id: {\n            valid: val => /^[0-9]*$/.test(val) && val.length === 9,\n            msg: 'תעודת זהות לא תקינה',\n        },\n        full_name: {\n            valid: val => /^([\\w\\u0590-\\u05FF]{2,})+\\s+([\\w\\u0590-\\u05FF\\s]{2,})+$/.test(val),\n            msg: 'יש למלא שם פרטי ושם משפחה',\n        },\n        last_digits:{\n            valid: val => /^[0-9]*$/.test(val) && val.length === 4,\n            msg: 'אנא הזינו 4 ספרות אחרונות בכרטיס האשראי',\n        },\n        checkbox:{\n            valid: val => val,\n            msg: 'שדה חובה',\n        }\n    };\n\n    let valid = true;\n    let msg   = '';\n\n    for(let rule of rules) {\n        if(typeof rule === 'function') {\n            valid = rule();\n            msg = 'שדה חובה';\n        } else {\n            if(!Validations[rule].valid(value)) {\n                valid = false;\n                msg = Validations[rule].msg;\n                break;\n            }\n        }\n    };\n\n    return {valid:valid,msg:msg};\n}","import React, { useState } from 'react';\n\nimport './index.scss';\n\nfunction AnimatedInput(props) {\n\n    const [animated, setAnimated] = useState(false);\n\n    const animatePlaceholder = (e) => {\n        let val = e.target.value;\n        setAnimated((val !== ''));\n        props.onChange(e);\n    }\n    const {\n        type,\n        name,\n        placeholder = '',\n        value = '',\n        disable_autocomplete = false,\n        showError,\n        className,\n        errorMessage = 'empty or undefined errorMessage prop',\n        tabIndex } = props;\n\n    let is_animated = animated || value !== '';\n\n    return (\n        <div className = {'animated-input-wrapper animated ' + className + (showError ? ' error' : '') + (is_animated ? ' animate' : '')}>\n            <input type         = { type }\n                   name         = { name }\n                   value        = { value }\n                   className    = { 'input' }\n                   onChange     = { (e) => animatePlaceholder(e) }\n                   tabIndex     = { tabIndex }\n                   autoComplete = { disable_autocomplete ? 'off' : ''}\n            />\n            <div className=\"placeholder\">{ placeholder }</div>\n            {showError ? <div className = \"error-text\">{ errorMessage }</div> : ''}\n        </div>\n    )\n}\nexport default AnimatedInput;","import React       from 'react';\nimport {Component} from 'react';\nimport {connect}   from \"react-redux\";\nimport Validate    from 'app/validation/validation';\n\n//components\nimport AnimatedInput from \"components/forms/animated_input\";\n\n//actions\nimport * as Actions from 'redux/actions';\n\n//assets\nimport './index.scss';\n\n\nclass Contact extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            first_try: true,\n            form: {\n                full_name: {\n                    valid: false,\n                    rules: ['full_name', 'not_empty'],\n                    errMsg: ''\n                },\n                phone: {\n                    valid: false,\n                    rules: ['phone', 'not_empty'],\n                    errMsg: ''\n                },\n                email: {\n                    valid: false,\n                    rules: ['email', 'not_empty'],\n                    errMsg: ''\n                },\n                message: {\n                    valid: false,\n                    rules: [],\n                    errMsg: ''\n                }\n            },\n        };\n    }\n\n    handleInputChange = (e) => {\n        let name = e.target.name;\n        let val  = e.target.value;\n        let validate = Validate(val, this.state.form[name].rules);\n        let new_state = {...this.state};\n\n        new_state.form[name].valid = validate.valid;\n        new_state.form[name].errMsg = validate.msg;\n\n        this.setState(new_state);\n        this.props.updateForm({[name]:val});\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        let form_valid = true;\n        let new_state = {...this.state.form};\n        let validate;\n        let is_valid;\n\n        for(let field in this.state.form) {\n            validate = Validate(this.props.Form[field], this.state.form[field].rules);\n            is_valid = validate.valid;\n            let msg  = validate.msg;\n\n            new_state[field].valid = is_valid;\n            new_state[field].errMsg = msg;\n\n            if(is_valid === false) {\n                form_valid = false;\n            }\n        }\n\n        this.setState({form:new_state, first_try:false});\n\n        if(form_valid) {\n            console.log('submit');\n        }\n    }\n\n    showError(field) {\n        return (!this.state.first_try && !this.state.form[field].valid);\n    }\n\n\n    render(){\n\n        const text = this.props.gd.translations;\n        const Form = this.props.Form;\n\n        return(\n            <section className='contact-page-wrapper'>\n\n                <div className='form-wrapper'>\n                    <form name=\"contact-form\">\n                        <AnimatedInput className='field'\n                                       value={Form.full_name}\n                                       name={'full_name'}\n                                       placeholder={'שם'}\n                                       disable_autocomplete = { true }\n                                       onChange={this.handleInputChange}\n                                       showError={this.showError('full_name')}\n                                       errorMessage={this.state.form.full_name.errMsg}\n                        />\n                        <AnimatedInput className= 'field'\n                                       value={Form.phone}\n                                       name={'phone'}\n                                       placeholder={'טלפון נייד'}\n                                       disable_autocomplete = { false }\n                                       onChange={this.handleInputChange}\n                                       showError={this.showError('phone')}\n                                       errorMessage={this.state.form.phone.errMsg}\n                        />\n                        <button type=\"submit\" onClick={ this.handleSubmit } className=\"submit-btn teal-button\">שלח</button>\n                    </form>\n                </div>\n            </section>\n        )\n    }\n}\n\n\n\n//connect to redux store\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n        gd:store.data.GeneralDeclaration,\n        Form:store.data.ContactForm,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateForm:(payload)=> dispatch(Actions.updateContactForm(payload)),\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Contact);","import * as types from \"constants/action-types\";\n\nexport function updateContactForm(payload) {\n    return {type : types.UPDATE_CONTACT_FORM, payload};\n}","import React, { Component } from 'react';\nimport {connect}            from 'react-redux';\nimport './index.scss';\n\nclass ContentPage extends Component {\n\n    render() {\n\n        var Text = this.props.Translations;\n\n        return (\n            <div className=\"content-page\">\n                <h1 className=\"title\">content page</h1>\n            </div>\n        )\n    }\n}\n\n//connect this component to the redux store\nconst mapStateToProps = store => {\n    return {\n        Translations: store.config.Translations,\n        deviceState: store.state.deviceState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContentPage);","import React           from 'react';\nimport { Component }   from 'react';\nimport { connect }     from 'react-redux';\nimport * as Actions    from 'redux/actions';\nimport './index.scss';\n\nclass BasicPopup extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animation_class: '',\n            popup_id: this.props.Data.popup_id\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.Data.popup_id !== state.popup_id) {\n            return {animation_class: 'active', popup_id:props.Data.popup_id}\n        }\n        return {};\n    }\n\n    /* add class for animation after it is inserted into the DOM */\n    componentDidMount() {\n        this.animateIn();\n    }\n\n    animateIn = () => {\n        requestAnimationFrame(() => {\n            requestAnimationFrame(() => {\n                this.setState({animation_class: 'active'});\n            })\n        })\n    }\n\n    /* first remove the active class for exit animation then call the callback */\n    animateOut = (callback) => {\n        this.setState({animation_class: ''});\n        setTimeout(() => {\n            if(callback) {\n                callback();\n            }\n            this.props.removePopup();\n        }, 200);\n    }\n\n    render() {\n        const Data = this.props.Data;\n        let { text = 'General Message Text' } = Data.payload;\n\n        return (\n            <div className = { \"backdrop general-msg \" + this.state.animation_class } onClick = { () => this.animateOut() }>\n                <div className = {\"popup_wrapper \" + this.state.animation_class} onClick = { (e) => e.stopPropagation() }>\n                    <button className = \"x_close_icon\" onClick = { () => this.animateOut() }></button>\n                    <div className = \"popup_content\">\n                        { text }\n                    </div>\n                    <button className=\"button teal-button accept-btn\" onClick = { () => this.animateOut() }>אישור</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n        Gd: store.data.Gd,\n        Data: store.state.popupsArray[store.state.popupsArray.length-1]\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {\n        addPopup: (payload) => dispatch(Actions.addPopup(payload)),\n        removePopup: () => dispatch(Actions.removePopup()),\n    }\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(BasicPopup);","import React           from 'react';\nimport { Component }   from 'react';\nimport { useSelector } from 'react-redux';\n\n//popup types\nimport * as popupTypes from 'constants/popup-types';\n\n//popup components\nimport BasicPopup   from './components/basic';\n\nimport './index.scss';\n\n//map types to actual components\nconst popupsComponents = {\n    [popupTypes.GENERAL_MESSAGE]: <BasicPopup />,\n    [popupTypes.API_MESSAGE]: <BasicPopup />,\n    [popupTypes.API_ERROR]: <BasicPopup />,\n}\n\nexport default function Popups() {\n    const popupsArray  = useSelector(store => store.state.popupsArray, []);\n    const currentPopup = popupsArray[popupsArray.length-1];\n    let popupToRender  = popupsComponents[currentPopup.type] ? popupsComponents[currentPopup.type] : <BasicPopup />;\n\n    return (\n        <div className = \"popup\">\n            { popupToRender }\n        </div>\n    )\n}","import React from 'react';\n\nimport './page404.css';\n\nconst Page404  = ({className, label, amount, onClick }) =>\n    <div className=\"404_wrapper container\">\n        <h1 className=\"title\">עמוד 404</h1>\n    </div>;\n\nexport default Page404;\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport './index.scss';\n\nclass Tool extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props.deviceState);\n\n        return (\n            <div className=\"tool-wrapper\">\n                <div className=\"component\">\n                    <div className=\"component-title\">\n                        deviceState\n                    </div>\n                    <div className=\"component-usage\">\n                        Render components or implement different behaviour per device type.\n                    </div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">redux: store.state.deviceState</div>\n                </div>\n                <div className=\"code-sample\">\n                    <pre>\n{`{\n    device: \"mobile\"\n    isDesktop: false\n    isMobile: true\n    isTablet: false\n    notDesktop: true\n    notMobile: false\n}\n`}\n                    </pre>\n                </div>\n                <div className=\"note\">\n                    <div className=\"note-label\">note:</div>\n                    <span>Use only if a responsive solution is impossible or too time consuming.</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {}\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Tool);\n","export const tools      = '/docs/tools';\nexport const device     = '/docs/tools/device';\n\nexport const components = '/docs/components';\nexport const scroll     = '/docs/components/scroll';\nexport const meta       = '/docs/components/meta';\nexport const loader     = '/docs/components/loader';\nexport const popups     = '/docs/components/popups';\n\n\nexport const containers = '/docs/containers';","import React         from 'react';\nimport { Component } from 'react';\nimport { connect }   from 'react-redux';\nimport { Switch }    from 'react-router-dom';\nimport { Route }     from 'react-router-dom';\nimport { NavLink }   from 'react-router-dom';\nimport { Redirect }  from 'react-router-dom';\n\n//Import documentation\nimport Device from './device';\n\n//css\nimport './index.scss';\n\n//routing constants\nimport * as Routes from 'docs/doc-routes';\n\n\nclass Tools extends Component {\n    render() {\n        \n        return (\n            <div className=\"tools-wrapper\">\n                <div className=\"menu-wrapper\">\n                    <NavLink to = { Routes.device } exact activeClassName='active' className=\"docs-item\">deviceState</NavLink>\n                </div>\n                <Switch>\n                    <Route exact path= { Routes.tools }>\n                        <Redirect to={ Routes.device } />\n                    </Route>\n                    <Route exact path={ Routes.device } component={ Device }/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\n//get required state from redux store and map them to the components props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n    }\n}\nexport default connect(mapStateToProps, null, null, { pure: false })(Tools);\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport './index.scss';\n\nclass Tool extends Component {\n\n    render() {\n        return (\n            <div className=\"tool-wrapper\">\n                <div className=\"component\">\n                    <div className=\"component-title\">\n                        ScrollToTop\n                    </div>\n                    <div className=\"component-usage\">\n                        Render components or implement different behaviour per device type.\n                    </div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">import ScrollToTop from 'components/routing/scroll_top';</div>\n                </div>\n                <div className=\"code-sample\">\n                    <code>\n                        {`<ScrollToTop />`}\n                    </code>\n                </div>\n                <div className=\"note\">\n                    <div className=\"note-label\">note:</div>\n                    <span>Disregards previous scrollTop position for history pop events(back button).</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {}\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Tool);\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport './index.scss';\n\nclass Tool extends Component {\n\n    render() {\n        return (\n            <div className=\"tool-wrapper\">\n                <div className=\"component\">\n                    <div className=\"component-title\">MetaTags</div>\n                    <div className=\"component-usage\">\n                        Renders dynamic meta tags from the server. Implemented in App.js.\n                    </div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">import MetaTags from 'components/meta_tags';</div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">Receives it's data from redux: store.data.MetaTags</div>\n                </div>\n                <div className=\"code-sample\">\n                    <pre>\n{`{\n    meta_tags: {\n        description: \"תחנות דלק TEN, שירות מצוין, דלקים איכותיים ומחירים תחרותיים.\",\n        keywords: \"דלק, ten, תחנת דלק\",\n        title: \"tenwebsite.inmanage.com - תחנות דלק TEN | מבצעי הדלק הטובים בארץ\"\n    },\n    extra_tags: [\n        <meta http-equiv='content-type' content='text/html; charset=utf-8' />\n        <meta http-equiv='imagetoolbar' content='yes' />\n        <meta name='robots' content='index, follow' />\n    ]\n}`}\n                    </pre>\n                </div>\n                <div className=\"code-sample\">\n                    <code>\n                        {`<MetaTags />`}\n                    </code>\n                </div>\n                <div className=\"note\">\n                    <div className=\"note-label\">note:</div>\n                    <span>Extra tag items are rendered using ReactHtmlParser</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {}\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Tool);\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\nimport * as Actions from 'redux/actions';\nimport './index.scss';\n\nclass Tool extends Component {\n\n    doSomeAsyncThing = () => {\n        this.props.setLoader(true);\n        setTimeout(()=>{\n            this.props.setLoader(false);\n        },3000);\n    }\n\n    render() {\n        return (\n            <div className=\"tool-wrapper\">\n                <div className=\"component\">\n                    <div className=\"component-title\">Loader</div>\n                    <div className=\"component-usage\">\n                        Simple full screen loader controlled by redux action. Implemented in App.js.\n                    </div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">import Loader from 'components/common/loader';</div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\">Action: setLoaderState(<i>boolean</i>)</div>\n                </div>\n                <div className=\"code-sample\">\n                    <code>\n                        {`<Loader />`}\n                    </code>\n                </div>\n                <div className=\"note\">\n                    <div className=\"note-label\">note:</div>\n                    <span>It's only a basic loader, tailor it to your specific project</span>\n                </div>\n                <button className=\"button\" onClick={ this.doSomeAsyncThing }>test loader</button>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLoader: (payload) => dispatch(Actions.setLoaderState(payload))\n    }\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Tool);\n","import React, {Component} from 'react';\nimport { connect }        from 'react-redux';\n\nimport * as Popups  from 'constants/popup-types';\nimport * as Actions from 'redux/actions';\nimport './index.scss';\n\nclass Tool extends Component {\n\n    showAPopup = () => {\n        let payload = {text:'test message'};\n        let payload2 = {text:'test message 2'};\n        this.props.addPopup({type: Popups.GENERAL_MESSAGE, payload:payload});\n    }\n\n    render() {\n        return (\n            <div className=\"tool-wrapper\">\n                <div className=\"component\">\n                    <div className=\"component-title\">Popups</div>\n                    <div className=\"component-usage\">\n                        Container responsible for displaying popups. Implemented in App.js.\n                    </div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\"><b>Locations:</b></div>\n                    <div className=\"label\">/popups - parent component. Matches popup types to specific popup components.</div>\n                    <div className=\"label\">/constants/popup-types.js - Popup type constants used to reference specific popup components</div>\n                    <div className=\"label\">/popups/components - Folder for popup components</div>\n                </div>\n                <div className=\"import-strip\">\n                    <div className=\"label\"> <b> Actions: </b></div>\n                    <div className=\"label\">addPopup(<i>object</i>) - adds a popup to the redux popups array</div>\n                    <div className=\"label\">removePopup() - removes the last popup that was added</div>\n                    <pre>\n{`{\n    type:`}<i> string </i>{`\n    payload:`} <i>object</i>{`\n}`}\n                    </pre>\n                </div>\n                <div className=\"code-sample\">\n                    <code>\n                        <b>{`In App.js:`}</b>\n                        <br />\n                        {`let showPopup = this.props.popupsArray.length > 0;`}\n                        <br />\n                        {`{ showPopup && <Popups />}`}\n                    </code>\n                </div>\n                <div className=\"note\">\n                    <div className=\"note-label\">note:</div>\n                    <span>It's easiest to copy paste the basic popup in order to create new ones.</span>\n                </div>\n                <button className=\"button\" onClick={ this.showAPopup }>test popup</button>\n            </div>\n        );\n    }\n}\n\n//add GD categories and deviceState to props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState\n    }\n}\n//map a doLgin function to props\nconst mapDispatchToProps = dispatch => {\n    return {\n        addPopup: (payload) => dispatch(Actions.addPopup(payload))\n    }\n}\n\n//connect to redux store - maps dispatch and redux state to props\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(Tool);\n","export const GENERAL_MESSAGE = 'GENERAL_MESSAGE';\nexport const API_MESSAGE     = 'API_MESSAGE';\nexport const API_ERROR       = 'API_ERROR';","import React         from 'react';\nimport { Component } from 'react';\nimport { connect }   from 'react-redux';\nimport { Switch }    from 'react-router-dom';\nimport { Route }     from 'react-router-dom';\nimport { NavLink }   from 'react-router-dom';\nimport { Redirect }  from 'react-router-dom';\n\n//Import documentation\nimport Scroll from './scrolltop';\nimport Meta   from './meta';\nimport Loader from './loader';\nimport Popups from './popups';\n\n//css\nimport './index.scss';\n\n\n//routing constants\nimport * as Routes from 'docs/doc-routes';\n\n\nclass Components extends Component {\n    render() {\n\n        return (\n            <div className=\"components-wrapper\">\n                <div className=\"menu-wrapper\">\n                    <NavLink to = { Routes.scroll } exact activeClassName='active' className=\"docs-item\">ScrollToTop</NavLink>\n                    <NavLink to = { Routes.meta }   exact activeClassName='active' className=\"docs-item\">MetaTags</NavLink>\n                    <NavLink to = { Routes.loader } exact activeClassName='active' className=\"docs-item\">Loader</NavLink>\n                    <NavLink to = { Routes.popups } exact activeClassName='active' className=\"docs-item\">Popups</NavLink>\n                </div>\n                <Switch>\n                    <Route exact path= { Routes.components }>\n                        <Redirect to={ Routes.scroll } />\n                    </Route>\n                    <Route exact path={ Routes.scroll } component={ Scroll }/>\n                    <Route exact path={ Routes.meta } component={ Meta }/>\n                    <Route exact path={ Routes.loader } component={ Loader }/>\n                    <Route exact path={ Routes.popups } component={ Popups }/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\n//get required state from redux store and map them to the components props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n    }\n}\nexport default connect(mapStateToProps, null, null, { pure: false })(Components);\n","import React         from 'react';\nimport { Component } from 'react';\nimport { connect }   from 'react-redux';\nimport { Switch }    from 'react-router-dom';\nimport { Route }     from 'react-router-dom';\nimport { NavLink }   from 'react-router-dom';\n\n//Import documentation\nimport Tools      from 'docs/tools';\nimport Components from 'docs/components';\n\n//css\nimport './index.scss';\n\n//routing constants\nimport * as Routes from 'docs/doc-routes';\n\n\nclass Documentation extends Component {\n    render() {\n\n        return (\n            <div className=\"documentation-wrapper\">\n                <div className=\"menu-wrapper\">\n                    <NavLink to = { Routes.tools } activeClassName='active' className=\"docs-category-item\">Tools</NavLink>\n                    <NavLink to = { Routes.components } activeClassName='active' className=\"docs-category-item\">Components</NavLink>\n                </div>\n                <Switch>\n                    <Route path={ Routes.tools } component={ Tools }/>\n                    <Route path={ Routes.components } component={ Components }/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\n//get required state from redux store and map them to the components props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n    }\n}\nexport default connect(mapStateToProps, null, null, { pure: false })(Documentation);\n","import React, {Component} from 'react';\nimport {connect}          from 'react-redux';\nimport {Switch, Route}    from 'react-router-dom';\n\n//import components\nimport Header      from 'containers/header';\nimport MetaTags    from 'components/meta_tags';\nimport Loader      from 'components/common/loader';\nimport ScrollToTop from 'components/routing/scroll_top';\n\n//Import containers\nimport Home    from 'containers/home';\nimport About   from 'containers/about';\nimport Contact from 'containers/contact';\nimport Content from 'containers/content-page';\nimport Popups  from 'popups';\nimport Page404 from 'containers/page404';\n\n//documentation - remove in production\nimport Docs from 'docs';\n\n//css\nimport 'styles/app.scss';\n\n//routing constants\nimport * as Routes from 'constants/routes';\n\n\nclass App extends Component {\n    render() {\n\n        let showPopup  = this.props.popupsArray.length > 0;\n        let showLoader = this.props.showLoader;\n\n        //template object for dynamic page routes (content pages)\n        const data = [\n            {path: '/content1', component: Content},\n            {path: '/content2', component: Content},\n            {path: '/content3', component: Content}\n        ];\n\n        return (\n            <div className=\"App\">\n                {this.props.deviceState &&\n                <>\n                    <Header />\n\n                    {/* main routing table */}\n                    <Switch>\n                        {/* REMOVE DOCUMENTATION IN PRODUCTION BUILDS */}\n                        <Route path={ Routes.docs } component={ Docs }/>\n\n                        {/* regular routes */}\n                        <Route exact path={ Routes.root } component={ Home }/>\n                        <Route exact path={ Routes.contact } component={ Contact }/>\n                        <Route exact path={ Routes.about } component={ About }/>\n\n                        {/* template for dynamic pages */}\n                        {data.map(page =>\n                            <Route key={ page.path } exact path={ page.path } component={ page.component }/>\n                        )}\n\n                        {/* defaults to 404 if none are found */}\n                        <Route component={ Page404 }/>\n                    </Switch>\n\n                    {/* main modal component */}\n                    { showPopup && <Popups />}\n\n                    {/* full page loader */}\n                    { showLoader && <Loader />}\n\n                    {/* make sure new page scroll position is at the top */}\n                    <ScrollToTop />\n\n                    {/* render meta tags from the server */}\n                    <MetaTags />\n                </>\n                }\n            </div>\n        )\n    }\n}\n\n//get required state from redux store and map them to the components props\nconst mapStateToProps = store => {\n    return {\n        deviceState: store.state.deviceState,\n        showLoader: store.state.showLoader,\n        popupsArray: store.state.popupsArray,\n        burgerMenuState: store.state.burgerMenuState,\n    }\n}\nexport default connect(mapStateToProps, null, null, {pure: false})(App);\n","import React             from 'react'; //React imports\nimport ReactDOM          from 'react-dom'; //React imports\nimport { Provider }      from 'react-redux'; //Redux HOC\nimport store             from \"./redux/index\"; //Redux Store\nimport { BrowserRouter } from 'react-router-dom'; //Router\nimport App               from './App'; //Root component\nimport deviceState       from './app/device_state/index'; //responsive view states\nnew deviceState(store.dispatch); //pass redux dispatch to device state\n\nReactDOM.render(\n    <BrowserRouter basename={'/react'}>\n        <Provider store = {store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);","import { setDeviceState } from '../../redux/actions';\n\nexport default class deviceState {\n\n    constructor(dispatch) {\n        this.dispatch            = dispatch;                      //redux action dispatch function\n        this.indicator           = document.createElement('div'); //div element to use for measurement\n        this.indicator.className = 'state-indicator';             //div class\n        this.debounce_delay      = 250;                           //debounce delay in milliseconds\n        document.body.appendChild(this.indicator);\n        this.start();\n    };\n\n    //returns the current device state according to the width of the screen as measured by\n    //the state-indicator div.\n    getScreen = () => {\n        var index = parseInt(window.getComputedStyle(this.indicator).getPropertyValue('z-index'), 10);\n        var states = {\n            1: 'desktop-large',\n            2: 'desktop',\n            3: 'tablet',\n            4: 'mobile'\n        };\n        return states[index] || 'desktop';\n    };\n\n    start = () => {\n        //Listen for screen resize with a debounce\n        var response = this.debounce(() => {\n\n            //determine current device\n            let device = this.getScreen();\n\n            //set device type in the redux store\n            let payload = {\n                device: device,\n                isMobile: device === 'mobile' ? true : false,\n                isTablet: device === 'tablet' ? true : false,\n                isDesktop: (device === 'desktop' || device === 'desktop-large') ? true : false,\n                notDesktop: (device !== 'desktop' || device !== 'desktop-large') ? true : false,\n                notMobile: device !== 'mobile' ? true : false,\n            }\n            this.dispatch(setDeviceState(payload));\n\n        }, this.debounce_delay, false);\n\n        window.addEventListener('resize', response);\n        response();\n    }\n\n    //Debounce the device state function so that it is called only once every 250ms\n    debounce(func, wait, immediate) {\n        let timeout;\n        return function () {\n            let context = this, args = arguments;\n            let later = function () {\n                timeout = null;\n                if (!immediate)\n                    func.apply(context, args);\n            };\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow)\n                func.apply(context, args);\n        };\n    }\n}","module.exports = __webpack_public_path__ + \"static/media/burger.70be8f86.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.84287d09.svg\";"],"sourceRoot":""}